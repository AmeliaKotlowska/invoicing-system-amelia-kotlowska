buildscript {
    ext {
        groovyVersion = '3.0.16'
        lombokVersion = '1.18.26'
        mongoVersion = '3.12.8'
        spockVersion = '2.3-groovy-3.0'
        springBootVersion = '2.4.2'
        springDependencyManagementVersion = '1.0.11.RELEASE'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '3.0.0'
    }
}

plugins {

    id 'java'

    id 'groovy'

    id 'application'

    id 'checkstyle'

    id 'jacoco'

    id 'org.springframework.boot' version "${springBootVersion}"

    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"


}

group = 'pl.futurecollars'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '15'

repositories {

    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

dependencies {

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"

    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"

    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation "org.flywaydb:flyway-core:7.6.0"
    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'org.postgresql:postgresql:42.2.19'

    implementation "org.mongodb:mongo-java-driver:${mongoVersion}"

}

bootJar {
    enabled = false
}

check {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    executionData tasks.withType(Test)
    dependsOn check
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    executionData tasks.withType(Test)
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.90
            }
        }

        rule {
            limit {
                counter = 'LINE'
                minimum = 0.90
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['pl/futurecollars/invoicing/InvoiceApplication.class',
                                        'pl/futurecollars/invoicing/db/Database.class',
                                        'pl/futurecollars/invoicing/configuration/*'] )
        }))
    }
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

tasks.named('test') {
    useJUnitPlatform()
}

task testWithFileDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'file'
    useJUnitPlatform()
}

task testWithMemoryDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'memory'
    useJUnitPlatform()
}

task testWithSqlDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'sql'
    useJUnitPlatform()
}

task testWithJpaDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa'
    useJUnitPlatform()
}

task testWithJpaFlywayDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa-flyway'
    useJUnitPlatform()
}

task testWithMongoDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'mongo'
    useJUnitPlatform()
}

check.dependsOn testWithFileDatabase
check.dependsOn testWithMemoryDatabase
check.dependsOn testWithSqlDatabase
check.dependsOn testWithJpaDatabase
check.dependsOn testWithJpaFlywayDatabase
check.dependsOn testWithMongoDatabase

String osName = System.getProperty("os.name").toLowerCase()
if (osName.contains("mac")) {
    task testWithPostgreSqlDatabase(type: Test) {
        systemProperty 'spring.profiles.active', 'sql-pg'
    }

    check.dependsOn testWithPostgreSqlDatabase
}
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Werror"
}
