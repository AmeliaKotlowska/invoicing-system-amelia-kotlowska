buildscript {
    ext {
        groovyVersion = '3.0.16'
        lombokVersion = '1.18.26'
        spockVersion = '2.3-groovy-4.0'
        springBootVersion = '2.7.9'
        springDependencyManagementVersion = '1.0.15.RELEASE'
        springFoxStarterVersion = '3.0.0'
    }
}

plugins {

    id 'java'

    id 'groovy'

    id 'application'

    id 'checkstyle'

    id 'jacoco'

    id 'org.springframework.boot' version "${springBootVersion}"

    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxStarterVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"

}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.80
            }
        }

        rule {
            limit {
                counter = 'LINE'
                minimum = 0.80
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:
                    ['pl/futurecollars/invoicing/InvoiceApplication.class',
                     'pl/futurecollars/invoicing/db/DatabaseConfiguration.class'])
        }))
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

test {
    finalizedBy jacocoTestReport
}

check {
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    dependsOn test
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Werror"
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

tasks.named('test') {
    useJUnitPlatform()
}